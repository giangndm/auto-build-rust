name: Release
on:
  push:
    branches: [master]
    tags:
      - "v*.*.*"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ARTIFACT_DIR: release-builds

jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build:
          - linux gnu x64
          - linux musl x64
          - linux gnu aarch64
          - linux musl aarch64
          - linux gnueabihf arm
          - linux gnueabihf armv7
          - linux gnu mips
          - linux gnuabi64 mips64
          - linux gnuabi64 mips64el
          - linux gnu mipsel
          - macos x64
          - macos aarch64
          - windows gnu x64
          - windows msvc x64
        include:
          - build: linux gnu x64
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            docker: true
          - build: linux musl x64
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            docker: true
          - build: linux gnu aarch64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            docker: true
          - build: linux gnueabihf arm
            os: ubuntu-latest
            rust: stable
            target: arm-unknown-linux-gnueabihf
            docker: true
          - build: linux gnueabihf armv7
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-gnueabihf
            docker: true
          - build: linux gnu mips
            os: ubuntu-latest
            rust: 1.71.1
            target: mips-unknown-linux-gnu
            docker: false
          - build: linux gnuabi64 mips64
            os: ubuntu-latest
            rust: 1.71.1
            target: mips64-unknown-linux-gnuabi64
            docker: false
          - build: linux gnuabi64 mips64el
            os: ubuntu-latest
            rust: 1.71.1
            target: mips64el-unknown-linux-gnuabi64
            docker: false
          - build: linux gnu mipsel
            os: ubuntu-latest
            rust: 1.71.1
            target: mipsel-unknown-linux-gnu
            docker: false
          - build: linux musl aarch64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-musl
            docker: false
          - build: macos x64
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            docker: false
          - build: macos aarch64
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            docker: false
          - build: windows gnu x64
            os: ubuntu-latest
            rust: stable
            target: x86_64-pc-windows-gnu
            docker: false
          - build: windows msvc x64
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            docker: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --package app1 --target ${{ matrix.target }}

      - name: Upload Artifact to Summary windows
        if: ${{ matrix.build == 'windows gnu x64' || matrix.build == 'windows msvc x64' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_DIR }}
          path: ./target/${{ matrix.target }}/release/${{ steps.make-artifact.outputs.name }}.exe

      - name: Upload Artifact to Summary linux/macOS
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_DIR }}
          path: ./target/${{ matrix.target }}/release/${{ steps.make-artifact.outputs.name }}

  create-release:
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_DIR }}
      - name: create_release
        id: create_release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ github.event_name == 'workflow_dispatch' && 'latest' || (github.ref == 'refs/heads/master' && 'latest') || github.ref }}
          title: Build ${{ github.event_name == 'workflow_dispatch' && 'development' || github.ref }}
          prerelease: true
